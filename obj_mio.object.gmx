<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mio_270</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_player</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>stun=0; //피격시 스턴

global.player_pspeed = 2; //이동 속도

spr_move[0] = spr_mio_0;    //배열에 방향별로 이미지를 지정함
spr_move[1] = spr_mio_90;
spr_move[2] = spr_mio_180;
spr_move[3] = spr_mio_270;

move_on = 0;    //이동중인지 체크. 0은 정지, 1은 이동
unit_dir = round(direction/90) mod 4;   //방향을 4부분으로 나눔
image_speed = 1;  //애니메이션의 속도

key_disable = 0;    //키 입력을 중단시킬지 정하는 변수. 1은 키 입력 중지, 0은 키 입력 가능

att_sw=0; //공격 종류 스위치
att_type=0;

spr_att[0]=spr_mio_0_att;
spr_att[1]=spr_mio_90_att;
spr_att[2]=spr_mio_180_att;
spr_att[3]=spr_mio_270_att;

spr_mio_skill_fly[0]=spr_mio_fly_0;
spr_mio_skill_fly[1]=spr_mio_fly_90;
spr_mio_skill_fly[2]=spr_mio_fly_180;
spr_mio_skill_fly[3]=spr_mio_fly_270;

spr_rolling[0]=spr_mio_rolling_0;
spr_rolling[1]=spr_mio_rolling_90;
spr_rolling[2]=spr_mio_rolling_180;
spr_rolling[3]=spr_mio_rolling_270;

//구르기 스위치
key_delay_left = 0;
key_delay_right = 0;
key_delay_up = 0;
key_delay_down = 0;

rolling_delay_left = 0;
rolling_delay_right = 0;
rolling_delay_up = 0;
rolling_delay_down = 0;

//투구 그리기 시위치
draw_helmet = 0;
//갑옷 그리기 스위치
draw_armor = 0;
//신발 그리기 스위치
draw_shoes = 0;
//무기 그리기 스위치
draw_weapon = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.kill_mio_on_purpose != 1 {
repeat(8) {
    it = instance_create(x, y, obj_effect1);
    it.spr = spr_effect1;
    it.img = 0;
    it.col = c_red;
    it.sca = random_range(0.1, 0.8);
    it.direction = irandom(360);
    it.speed = random_range(2, 5);
    it.friction = 0.1;
}

it = instance_create(x, y, obj_effect1);
it.spr = spr_effect1;
it.img = 0;
it.col = c_red;
it.sca_spd = 0.05;

it = instance_create(x, y, obj_effect1);
it.spr = spr_effect1;
it.img = 0;

instance_create(0,0,obj_revive_player); //부활

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>att_sw=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = floor(room_height-y);

unit_dir = round(direction/90) mod 4;


//화면 밖으로 나가지 못하게 함
if x&lt;10
    x=10;
if x&gt;room_width-10
    x=room_width-10;
if y&lt;10
    y=10;
if y&gt;room_height-12
    y=room_height-12;

//나무 같은 올라갈 수 없는 물체에서 밀려나도록 함    
aa=instance_nearest(x,y,obj_thing);
if(!place_free(x,y)) {
    with(aa) {
        spd=1; //튕기는 속도
        dir=point_direction(other.x, other.y, x, y)+180;
        other.x+=lengthdir_x(spd,dir);
        other.y+=lengthdir_y(spd,dir);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_on = 0;    //아무 입력도 안 하면 미오 멈춘 모습을 그린다

 //구르기 도중 대화창이 뜰 경우 구르는 것을 중단함
if instance_exists(objWordboxDefault) || instance_exists(obj_mio_key_disable) {
    if rolling_delay_left&gt;0 rolling_delay_left = 0;
    if rolling_delay_right&gt;0 rolling_delay_right = 0;
    if rolling_delay_up&gt;0 rolling_delay_up = 0;
    if rolling_delay_down&gt;0 rolling_delay_down = 0;
}    
//구르기 체크
if rolling_delay_left &gt; 0 { rolling_delay_left--;move_on = 2; x -= 5*place_free(x-5, y);}
else if rolling_delay_right &gt; 0 { rolling_delay_right--; move_on = 2; x += 5*place_free(x+5, y);}
else if rolling_delay_up &gt; 0 { rolling_delay_up--; move_on = 2; y -= 5*place_free(x, y-5);}
else if rolling_delay_down &gt; 0 { rolling_delay_down--; move_on = 2; y += 5*place_free(x, y+5);}
else {
    move_on = 0; key_disable = 0;  //평상시 이 코드가 항상 실행됨에 주의!!
}    
if instance_exists(objWordboxDefault) //대화 중에는 멈춘 이미지 표시, 키 입력 불가
    || instance_exists(obj_mio_key_disable) {
    move_on = 0;
    key_disable = 1;
}

if key_delay_left&gt;0 {key_delay_left--;} else {key_delay_left = 0;}
if key_delay_right&gt;0 {key_delay_right--;} else {key_delay_right = 0;}
if key_delay_up&gt;0 {key_delay_up--;} else {key_delay_up = 0;}
if key_delay_down&gt;0 {key_delay_down--;} else {key_delay_down = 0;}


if key_disable = 0 { //키 입력 가능한가

if keyboard_check_pressed(vk_up) {
    if move_on = 0 &amp;&amp; key_delay_up = 0 {
        key_delay_up = 20; //0.333초간 키 체크
    }
    else if key_delay_up &gt; 0 {
        move_on = 2;
        rolling_delay_up = 20; //4프레임 또는 0.34초간 구르기 지속
        key_delay_up = 0;
        key_disable = 1;
        image_index = 0;        
    }
}

    
if keyboard_check(vk_up) //위쪽
{
    y -= global.player_pspeed_total*place_free(x, y-global.player_pspeed_total);
    direction = 90;
    move_on = 1;
}


if keyboard_check_pressed(vk_down) {
    if move_on = 0 &amp;&amp; key_delay_down = 0 {
        key_delay_down = 20; //0.333초간 키 체크
    }
    else if key_delay_down &gt; 0 {
        move_on = 2;
        rolling_delay_down = 20; //4프레임 또는 0.34초간 구르기 지속
        key_delay_down = 0;
        key_disable = 1;
        image_index = 0;
    }
}

    
if keyboard_check(vk_down) //아래쪽
{
    y += global.player_pspeed_total*place_free(x, y+global.player_pspeed_total);
    direction = 270;
    move_on = 1;
}

if keyboard_check_pressed(vk_left) {
    if move_on = 0 &amp;&amp; key_delay_left = 0 {
        key_delay_left = 20; //0.333초간 키 체크
    }
    else if key_delay_left &gt; 0 {
        move_on = 2; //구르기 모드
        rolling_delay_left = 20; //4프레임 또는 0.34초간 구르기 지속
        key_delay_left = 0;
        key_disable = 1;
        image_index = 0; //자연스럽게 굴러가기 위한 서브 이미지 초기화
    }
}

if keyboard_check(vk_left)  //왼쪽 
{
    x -= global.player_pspeed_total*place_free(x-global.player_pspeed_total, y);    //장애물이 없을 때만 이동
    direction = 180;    //방향 설정
    move_on = 1;    //이동 설정
}

    
if keyboard_check_pressed(vk_right) {
    if move_on = 0 &amp;&amp; key_delay_right = 0 {
        key_delay_right = 20; //0.333초간 키 체크
    }
    else if key_delay_right &gt; 0 {
        move_on = 2;
        rolling_delay_right = 20; //4프레임 또는 0.34초간 구르기 지속
        key_delay_right = 0;
        key_disable = 1;
        image_index = 0;
    }
}

if keyboard_check(vk_right) //오른쪽
{
    x += global.player_pspeed_total*place_free(x+global.player_pspeed_total, y);
    direction = 0;
    move_on = 1;
}

}




if global.player_hp &lt;= 0 { instance_destroy(); }

if stun&gt;0 {stun-=1;} else{stun=0;} //스턴





if !instance_exists(obj_no_attack_region) {
if key_disable = 0 {
if keyboard_check_pressed(ord("Z")) { //부리 쪼기 공격
if att_sw=0 { //여길 조작하면 연계 공격 가능할듯
    aa=instance_create(x, y, obj_mio_att);
    aa.att=global.player_dmg_total; //공격수치 입력
    aa.direction=direction; //방향은 플레이어의 방향
    aa.alarm[0]=room_speed*1; //공격 오브젝트 파기될 때 까지 딜레이
    aa.speed=1.5; //발사 속도
    
    image_index=0; //공격 애니메이션 서브 이미지 초기화
    att_sw=1; //공격 스위치 변경
    alarm[0]=room_speed*0.1; //재공격을 위해 딜레이를 줌
}
}

if keyboard_check(ord("A")) &amp;&amp; global.player_mp&gt;=5 { //회오리 스킬
if att_sw=0 {
    aa=instance_create(x, y, obj_mio_skill_twister);
    aa.att=global.player_dmg_total; //공격수치 입력
    aa.direction=direction; //방향은 플레이어의 방향
    aa.alarm[0]=room_speed*0.01; //일정 시간동안 공격 마스크 지속됨
    
    image_index=0; //공격 애니메이션 서브 이미지 초기화
    att_sw=2; //공격 스위치 변경
    alarm[0]=20; //4프레임 후 다시 바로 스킬 사용가능(연속 스킬) 
    
    global.player_mp -= 5;
    
    audio_play_sound(quack_mio_twister, 1, 0);
}
}

if keyboard_check(ord("S")) &amp;&amp; global.player_mp&gt;=1 { //날기 스킬
if att_sw=0 {
    image_index=0; //공격 애니메이션 서브 이미지 초기화
    att_sw=3; //공격 스위치 변경
    alarm[0]=20; //4프레임 후 다시 바로 스킬 사용가능(연속 스킬)
    
    global.player_mp -= 1;
    
    audio_play_sound(flap_mio_fly, 1, 0);
}
}
}
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var col;
col = c_white;

if stun&gt;0 {col=c_red;}


//================= 투구 장착 ================
if global.eqm_slot[0] = 2 {
//투구 보통 이미지 (또는 걷기 이미지)
spr_helmet = spr_light_helmet;
//투구 공격 이미지 (회오리 이미지)
spr_helmet_attack = spr_light_helmet_attack;
//투구 구르기 이미지
spr_helmet_rolling[0] = spr_light_helmet_rolling_0;
spr_helmet_rolling[1] = spr_light_helmet_rolling_90;
spr_helmet_rolling[2] = spr_light_helmet_rolling_180;
spr_helmet_rolling[3] = spr_light_helmet_rolling_270;
//투구 날기 이미지
spr_helmet_fly[0] = spr_light_helmet_fly_0;
spr_helmet_fly[1] = spr_light_helmet_fly_90;
spr_helmet_fly[2] = spr_light_helmet_fly_180;
spr_helmet_fly[3] = spr_light_helmet_fly_270;

draw_helmet = 1; //실시간 투구 그리기 실정
}
else {
    draw_helmet = 0;
}

//================= 갑옷 장착 ==================
if global.eqm_slot[1] = 10 { //미오의 주머니
//갑옷 보통 이미지
spr_armor = armor_pocket_stop;
//갑옷 공격 이미지
spr_armor_attack = armor_pocket_attack;
//갑옷 구르기 이미지
spr_armor_rolling[0] = armor_pocket_rolling_0;
spr_armor_rolling[1] = armor_pocket_rolling_90;
spr_armor_rolling[2] = armor_pocket_rolling_180;
spr_armor_rolling[3] = armor_pocket_rolling_270;
//갑옷 날기 이미지
spr_armor_fly[0] = armor_pocket_fly_0;
spr_armor_fly[1] = armor_pocket_fly_90;
spr_armor_fly[2] = armor_pocket_fly_180;
spr_armor_fly[3] = armor_pocket_fly_270;

draw_armor = 1;
}
else if global.eqm_slot[1] = 5 { //빛의 갑옷
spr_armor = armor_light_stop;

spr_armor_attack = armor_light_attack;

spr_armor_rolling[0] = armor_light_rolling_0;
spr_armor_rolling[1] = armor_light_rolling_90;
spr_armor_rolling[2] = armor_light_rolling_180;
spr_armor_rolling[3] = armor_light_rolling_270;

spr_armor_fly[0] = armor_light_fly_0;
spr_armor_fly[1] = armor_light_fly_90;
spr_armor_fly[2] = armor_light_fly_180;
spr_armor_fly[3] = armor_light_fly_270;

draw_armor = 1;
}
else {
    draw_armor = 0;
}

//================== 신발 장착 ====================
if global.eqm_slot[4] = 9 { //빛의 신발
//신발 보통 이미지 (또는 신발 공격 이미지)
spr_shoes = shoes_light_stop; 
//신발 무빙 이미지
spr_shoes_moving[0] = shoes_light_moving_0;
spr_shoes_moving[1] = shoes_light_moving_90;
spr_shoes_moving[2] = shoes_light_moving_180;
spr_shoes_moving[3] = shoes_light_moving_270;

spr_shoes_rolling[0] = shoes_light_rolling_0;
spr_shoes_rolling[1] = shoes_light_rolling_90;
spr_shoes_rolling[2] = shoes_light_rolling_180;
spr_shoes_rolling[3] = shoes_light_rolling_270;

spr_shoes_fly[0] = shoes_light_fly_0;
spr_shoes_fly[1] = shoes_light_fly_90;
spr_shoes_fly[2] = shoes_light_fly_180;
spr_shoes_fly[3] = shoes_light_fly_270;

draw_shoes = 1;
}
else {
    draw_shoes = 0;
}

//==================== 무기 장착 ======================
if global.eqm_slot[2] = 3 || global.eqm_slot[3] = 3 { //빛의 검
//무기 보통 이미지
spr_weapon = weapon_light_stop;
//무기 공격 이미지
spr_weapon_attack = weapon_light_attack;
//무기 날기 이미지
spr_weapon_fly[0] = weapon_light_fly_0;
spr_weapon_fly[1] = weapon_light_fly_90;
spr_weapon_fly[2] = weapon_light_fly_180;
spr_weapon_fly[3] = weapon_light_fly_270;
//(무기는 구르기 이미지가 없음)

draw_weapon = 1;
}
else {
    draw_weapon = 0;
}

if att_sw=0 {    //공격 중이 아닌가? (공격 대기 상태)
    if move_on = 0 {    //멈춰있을 때
        sprite_index = spr_move[unit_dir]; //스프라이트 인덱스 초기화
        draw_sprite_ext(spr_move[unit_dir],0,x,y,1,1,0,col,1);
        
        if unit_dir = 1 {   //90도일 때 무기는 헬멧보다 먼저 그려야 함 (헬멧 이미지가 무기 이미지를 덮으므로)
            if draw_weapon {draw_sprite_ext(spr_weapon,unit_dir,x,y,1,1,0,col,1);}
            if draw_helmet {draw_sprite_ext(spr_helmet,unit_dir,x,y,1,1,0,col,1);}
            if draw_armor {draw_sprite_ext(spr_armor,unit_dir,x,y,1,1,0,col,1);}
            if draw_shoes {draw_sprite_ext(spr_shoes,unit_dir,x,y,1,1,0,col,1);}  
        }
        else { //0도, 180도, 270도 에서는 무기를 제일 나중에 그림
            if draw_helmet {draw_sprite_ext(spr_helmet,unit_dir,x,y,1,1,0,col,1);}
            if draw_armor {draw_sprite_ext(spr_armor,unit_dir,x,y,1,1,0,col,1);}
            if draw_shoes {draw_sprite_ext(spr_shoes,unit_dir,x,y,1,1,0,col,1);}
            if draw_weapon {draw_sprite_ext(spr_weapon,unit_dir,x,y,1,1,0,col,1);}
        }
    }
    else if move_on = 1 {   //이동할 때
        sprite_index = spr_move[unit_dir];
        image_speed = 0.1;
        draw_sprite_ext(spr_move[unit_dir],-1,x,y,1,1,0,col,1);

        if unit_dir = 1 {   //90도일 때 무기는 헬멧보다 먼저 그려야 함 (헬멧 이미지가 무기 이미지를 덮으므로)
            if draw_weapon {draw_sprite_ext(spr_weapon,unit_dir,x,y,1,1,0,col,1);}
            if draw_helmet {draw_sprite_ext(spr_helmet,unit_dir,x,y,1,1,0,col,1);}
            if draw_armor {draw_sprite_ext(spr_armor,unit_dir,x,y,1,1,0,col,1);}
            if draw_shoes {draw_sprite_ext(spr_shoes_moving[unit_dir],-1,x,y,1,1,0,col,1);}  
        }
        else { //0도, 180도, 270도 에서는 무기를 제일 나중에 그림
            if draw_helmet {draw_sprite_ext(spr_helmet,unit_dir,x,y,1,1,0,col,1);}
            if draw_armor {draw_sprite_ext(spr_armor,unit_dir,x,y,1,1,0,col,1);}
            if draw_shoes {draw_sprite_ext(spr_shoes_moving[unit_dir],-1,x,y,1,1,0,col,1);}
            if draw_weapon {draw_sprite_ext(spr_weapon,unit_dir,x,y,1,1,0,col,1);}
        }
    }
    else if move_on = 2 {   //구를 때
        sprite_index = spr_rolling[unit_dir];
        image_speed = 0.2;
        draw_sprite_ext(spr_rolling[unit_dir],-1,x,y,1,1,0,col,1);
        
        if draw_helmet {draw_sprite_ext(spr_helmet_rolling[unit_dir],-1,x,y,1,1,0,col,1);}
        if draw_armor {draw_sprite_ext(spr_armor_rolling[unit_dir],-1,x,y,1,1,0,col,1);}
        if draw_shoes {draw_sprite_ext(spr_shoes_rolling[unit_dir],-1,x,y,1,1,0,col,1);}
    }    
}

else if att_sw=1 {   //공격 중인가?
    sprite_index = spr_att[unit_dir]; //스프라이트를 교체
    draw_sprite_ext(spr_att[unit_dir],0,x,y,1,1,0,col,1);//공격 이미지 표시

    if unit_dir = 1 {   //90도일 때 무기는 헬멧보다 먼저 그려야 함 (헬멧 이미지가 무기 이미지를 덮으므로)
        if draw_weapon {draw_sprite_ext(spr_weapon_attack, unit_dir, x,y,1,1,0,col,1);}
        if draw_helmet {draw_sprite_ext(spr_helmet_attack, unit_dir, x,y,1,1,0,col,1);}
        if draw_armor {draw_sprite_ext(spr_armor_attack, unit_dir, x,y,1,1,0,col,1);}
        if draw_shoes {draw_sprite_ext(spr_shoes, unit_dir, x,y,1,1,0,col,1);}
    }
    else { //0도, 180도, 270도 에서는 무기를 제일 나중에 그림
        if draw_helmet {draw_sprite_ext(spr_helmet_attack, unit_dir, x,y,1,1,0,col,1);}
        if draw_armor {draw_sprite_ext(spr_armor_attack, unit_dir, x,y,1,1,0,col,1);}
        if draw_shoes {draw_sprite_ext(spr_shoes, unit_dir, x,y,1,1,0,col,1);}
        if draw_weapon {draw_sprite_ext(spr_weapon_attack, unit_dir, x,y,1,1,0,col,1);}
    }   
}

else if att_sw=2 {   //회오리 스킬 공격 중인가?
    sprite_index = spr_mio_skill_twister;
    image_speed = 0.2;
    draw_sprite_ext(spr_mio_skill_twister,-1,x,y,1,1,0,col,1); //회오리 스킬 이미지 표시

    //회오리 공격은 방향과 관계 없이 항상 무기를 그린 후에 투구를 그림
    if draw_weapon {draw_sprite_ext(spr_weapon_attack, -1, x,y,1,1,0,col,1);}
    if draw_helmet {draw_sprite_ext(spr_helmet_attack, -1, x,y,1,1,0,col,1);}
    if draw_armor {draw_sprite_ext(spr_armor_attack, -1, x,y,1,1,0,col,1);}
    if draw_shoes {draw_sprite_ext(spr_shoes, -1, x,y,1,1,0,col,1);}
}

else if att_sw=3 {   //날기 스킬 중인가?
    sprite_index = spr_mio_skill_fly[unit_dir];
    image_speed = 0.2;
    draw_sprite_ext(spr_mio_skill_fly[unit_dir],-1,x,y,1,1,0,col,1); //날기 스킬 이미지 표시
    draw_sprite_ext(spr_mio_fly_shadow,-1,x,y,1,1,0,col,0.5); //그림자 표시

    if unit_dir = 1 {   //90도일 때 무기는 헬멧보다 먼저 그려야 함 (헬멧 이미지가 무기 이미지를 덮으므로)
        if draw_weapon {draw_sprite_ext(spr_weapon_fly[unit_dir], -1, x,y,1,1,0,col,1);}
        if draw_helmet {draw_sprite_ext(spr_helmet_fly[unit_dir], -1, x,y,1,1,0,col,1);}
        if draw_armor {draw_sprite_ext(spr_armor_fly[unit_dir],-1,x,y,1,1,0,col,1);}
        if draw_shoes {draw_sprite_ext(spr_shoes_fly[unit_dir],-1,x,y,1,1,0,col,1);}
    }
    else { //0도, 180도, 270도 에서는 무기를 제일 나중에 그림
        if draw_helmet {draw_sprite_ext(spr_helmet_fly[unit_dir], -1, x,y,1,1,0,col,1);}
        if draw_armor {draw_sprite_ext(spr_armor_fly[unit_dir],-1,x,y,1,1,0,col,1);}
        if draw_shoes {draw_sprite_ext(spr_shoes_fly[unit_dir],-1,x,y,1,1,0,col,1);}
        if draw_weapon {draw_sprite_ext(spr_weapon_fly[unit_dir], -1, x,y,1,1,0,col,1);}
    }       
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>24,35</point>
    <point>24,24</point>
  </PhysicsShapePoints>
</object>
